/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.confluent.csta.examples.transactions.producer.transactional;

import org.apache.kafka.clients.producer.*;
import org.apache.kafka.common.header.Header;
import org.apache.kafka.common.header.internals.RecordHeader;
import java.io.*;
import java.nio.file.*;
import java.util.*;
import io.confluent.kafka.serializers.KafkaAvroSerializer;
import io.confluent.kafka.serializers.KafkaAvroSerializerConfig;
import models.avro.SimpleValue;


public class TransactionalProducer {

    public static Properties loadConfig(final String configFile) throws IOException {
        if (!Files.exists(Paths.get(configFile))) {
            throw new IOException(configFile + " not found.");
        }
        final Properties cfg = new Properties();
        try (InputStream inputStream = new FileInputStream(configFile)) {
            cfg.load(inputStream);
        }
        return cfg;
    }

    private static SimpleValue generateSimpleValue(int counter) {
        SimpleValue value = SimpleValue.newBuilder()
        .setTheName("This is message " + Integer.toString(counter))
        .setTheValue("Some value")
        .setTheNewName("And another, new name")
        .build();
        return value;
    }

    public static void main(String[] args) {
        if (args.length != 1) {
            System.err.println("Usage: java <jar file> <property file>");
            System.exit(1);
        }
        try {
            final Properties config = loadConfig(args[0]);
            config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, "org.apache.kafka.common.serialization.StringSerializer");
            config.put("value.serializer",
                    "org.apache.kafka.common.serialization.StringSerializer");
            config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, KafkaAvroSerializer.class);
            config.put(KafkaAvroSerializerConfig.SCHEMA_REGISTRY_URL_CONFIG, "http://localhost:8081");
            config.put("acks", "all");
            config.put("enable.idempotence", "true");
            String topic = config.getProperty("topic");
            config.remove("topic");
            try (Producer<String, SimpleValue> producer = new KafkaProducer<>(config)) {
                producer.initTransactions();
                for (int i = 0; i < 10; i++) {
                    producer.beginTransaction();
                    /*
                     * List <Header> headers = new ArrayList<>(); headers.add(new
                     * RecordHeader("traceId", Long.toString(System.currentTimeMillis() /
                     * 1000L).getBytes()));
                     */
                    producer.send(new ProducerRecord<String, SimpleValue>(topic, null, null,
                            "a", generateSimpleValue(i),
                            Arrays.<Header>asList(new RecordHeader("traceId", Long
                                    .toString(System.currentTimeMillis() / 1000L).getBytes()))));
                    producer.send(new ProducerRecord<String, SimpleValue>(topic, null, null,
                            "b", generateSimpleValue(i),
                            Arrays.<Header>asList(new RecordHeader("traceId", Long
                                    .toString(System.currentTimeMillis() / 1000L).getBytes()))));
                    producer.send(new ProducerRecord<String, SimpleValue>(topic, null, null,
                            "c", generateSimpleValue(i),
                            Arrays.<Header>asList(new RecordHeader("traceId", Long
                                    .toString(System.currentTimeMillis() / 1000L).getBytes()))));
                    producer.send(new ProducerRecord<String, SimpleValue>(topic, null, null,
                            "d", generateSimpleValue(i),
                            Arrays.<Header>asList(new RecordHeader("traceId", Long
                                    .toString(System.currentTimeMillis() / 1000L).getBytes()))));
                    if (i % 2 == 1) {
                        // Oh no! Something went wrong and we need to abort this transaction
                        producer.abortTransaction();
                    } else {
                        producer.commitTransaction();
                    }
                }
            }
        } catch (IOException e) {
            System.err.println("An exception occurred while load properties file: " + e);
            System.exit(1);
        }

    }
}
